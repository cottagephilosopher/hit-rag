# 多阶段构建 - 将两个前端整合到一个容器
# 注意：此 Dockerfile 需要在父目录（rags/）下构建，以访问 hit-rag-ui 和 versa-chat-view
# 构建命令：docker build -f hit-rag/Dockerfile.frontend-unified -t hit-rag-frontend .

# Stage 1: 构建 Vue.js 文档管理界面（使用国内镜像加速）
FROM docker.m.daocloud.io/library/node:20-slim AS build-vue-ui

WORKDIR /build-vue
COPY hit-rag-ui/package*.json ./
# 配置 npm 使用国内镜像源加速
RUN npm config set registry https://registry.npmmirror.com
RUN npm install
COPY hit-rag-ui/ ./

# 构建生产版本
RUN npm run build
# 输出到 /build-vue/dist


# Stage 2: 构建 Next.js 聊天界面（使用国内镜像加速）
FROM docker.m.daocloud.io/library/node:20-slim AS build-chat-view

WORKDIR /build-chat
COPY versa-chat-view/package*.json ./
# 配置 npm 使用国内镜像源加速
RUN npm config set registry https://registry.npmmirror.com
RUN npm install
COPY versa-chat-view/ ./

# 设置环境变量
ENV RAG_API_BASE=http://localhost:8000
ENV NEXT_PUBLIC_WELCOME_TITLE="RAG 智能问答助手"
ENV NEXT_PUBLIC_WELCOME_MESSAGE="询问关于您文档的任何问题"

# 构建生产版本
RUN npm run build
# 输出到 /build-chat/.next


# Stage 3: 最终镜像 - Nginx + Node.js 服务器（使用国内镜像加速）
FROM docker.m.daocloud.io/library/nginx:alpine

# 安装 Node.js（用于运行 Next.js）
RUN apk add --no-cache nodejs npm

# 复制 Nginx 配置
COPY hit-rag/deploy/nginx-unified.conf /etc/nginx/conf.d/default.conf

# 复制 Vue.js 构建产物到 Nginx
COPY --from=build-vue-ui /build-vue/dist /usr/share/nginx/html/ui

# 复制 Next.js 应用
WORKDIR /app/chat
COPY --from=build-chat-view /build-chat/package*.json ./
COPY --from=build-chat-view /build-chat/.next ./.next
COPY --from=build-chat-view /build-chat/public ./public
COPY --from=build-chat-view /build-chat/node_modules ./node_modules

# 创建启动脚本
RUN cat > /start.sh << 'EOF'
#!/bin/sh

# 启动 Next.js 服务器（后台）
cd /app/chat
NODE_ENV=production npm start &

# 启动 Nginx（前台）
nginx -g 'daemon off;'
EOF

RUN chmod +x /start.sh

# 暴露端口
EXPOSE 80

# 启动服务
CMD ["/start.sh"]
